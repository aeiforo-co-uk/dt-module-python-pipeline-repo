name: Python CI/CD Pipeline Template

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        default: 'dt-module-python-pipeline-repo'
      deploy_env:
        description: 'Deployment Environment'
        required: true
        default: 'deployment'
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        default: 'true'
      python_version:
        description: 'Python Version'
        required: true
        default: '3.9'

env:
  REPO_NAME: ${{ github.event.inputs.repo_name }}
  DEPLOY_ENV: ${{ github.event.inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ github.event.inputs.build_artifacts }}
  PYTHON_VERSION: ${{ github.event.inputs.python_version }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

  run_tests:
    name: Run Tests with Pytest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt  # Install dependencies

      - name: Run Tests with Pytest
        run: pytest --maxfail=1 --disable-warnings -q

      - name: Generate Test Report
        run: pytest --junitxml=junit/test-results.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results
          path: junit/test-results.xml

  sonarqube_analysis:
    name: SonarQube Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install SonarQube Scanner
        run: |
          curl -sSL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -o sonar-scanner.zip
          unzip sonar-scanner.zip -d $HOME
          echo "export PATH=$HOME/sonar-scanner-4.8.0.2856-linux/bin:\$PATH" >> $GITHUB_ENV

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
          -Dsonar.projectKey=${{ env.REPO_NAME }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

      - name: Upload SonarQube Report (Optional)
        uses: actions/upload-artifact@v2
        with:
          name: sonar-report
          path: sonar-report.json

  build_artifacts:
    name: Build Project Artifacts
    runs-on: ubuntu-latest
    if: ${{ env.BUILD_ARTIFACTS == 'true' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Artifacts
        run: python setup.py sdist bdist_wheel

      - name: Store Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [build_artifacts]
    steps:
      - name: Deploy Application
        run: |
          echo "Deploying application artifacts to ${{ env.DEPLOY_ENV }}"
          # Add your deployment script or commands here
